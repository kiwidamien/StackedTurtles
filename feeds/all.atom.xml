<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stacked Turtles</title><link href="https://kiwidamien.github.io/" rel="alternate"></link><link href="https://kiwidamien.github.io/feeds/all.atom.xml" rel="self"></link><id>https://kiwidamien.github.io/</id><updated>2018-10-01T00:00:00-07:00</updated><entry><title>test post</title><link href="https://kiwidamien.github.io/testpost.html" rel="alternate"></link><published>2018-10-01T00:00:00-07:00</published><updated>2018-10-01T00:00:00-07:00</updated><author><name>Damien Martin</name></author><id>tag:kiwidamien.github.io,2018-10-01:/testpost.html</id><summary type="html">&lt;p&gt;This is a test.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do unordered lists work?&lt;/li&gt;
&lt;li&gt;Like, really work?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There seems to be an issue with Markdown&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What about numbered lists?&lt;/li&gt;
&lt;li&gt;There is more to life than numbers&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Damien&lt;/td&gt;
&lt;td&gt;2nd July&lt;/td&gt;
&lt;td&gt;teaching&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shiloh&lt;/td&gt;
&lt;td&gt;Unknown&lt;/td&gt;
&lt;td&gt;Pushing up daisies (RIP)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Fin.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a test.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do unordered lists work?&lt;/li&gt;
&lt;li&gt;Like, really work?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There seems to be an issue with Markdown&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What about numbered lists?&lt;/li&gt;
&lt;li&gt;There is more to life than numbers&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Damien&lt;/td&gt;
&lt;td&gt;2nd July&lt;/td&gt;
&lt;td&gt;teaching&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shiloh&lt;/td&gt;
&lt;td&gt;Unknown&lt;/td&gt;
&lt;td&gt;Pushing up daisies (RIP)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Fin.&lt;/p&gt;</content></entry><entry><title>Munging with MultiIndices: election data</title><link href="https://kiwidamien.github.io/munging-with-multiindices-election-data.html" rel="alternate"></link><published>2018-09-27T11:00:00-07:00</published><updated>2018-09-27T11:00:00-07:00</updated><author><name>Damien Martin</name></author><id>tag:kiwidamien.github.io,2018-09-27:/munging-with-multiindices-election-data.html</id><summary type="html">&lt;p&gt;We show how to take an Excel spreadsheet, with merged column headings, and process it for further analysis.&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is lots of data available for the &lt;a href="https://data.opendatasoft.com/explore/dataset/usa-2016-presidential-election-by-county@public/"&gt;2016&lt;/a&gt; and &lt;a href="https://www.kaggle.com/joelwilson/2012-2016-presidential-elections"&gt;2012 presidential&lt;/a&gt; elections, broken down to the county level.&lt;/p&gt;
&lt;p&gt;The other election years can typically be found in the form of PDFs, and have to be manually converted. Finding a comprehensive list of election results for multiple years is challenging. Stephen Wolf of the Daily Kos has created an &lt;a href="https://drive.google.com/folderview?id=0Bz_uFI8VY7xLekx0cWdVcGhJblk&amp;amp;usp=sharing"&gt;Excel spreadsheet&lt;/a&gt; from &lt;a href="http://uselectionatlas.org/"&gt;Dave Leip's Atlas&lt;/a&gt;, which gives the election results back as far as 1828.&lt;/p&gt;
&lt;p&gt;The trouble is, the Excel sheet is difficult to import into Pandas.
&lt;img alt="Screenshot of presidential election spreadsheet" src="images/presidential_spreadsheet_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;Note the data is &lt;em&gt;wide&lt;/em&gt;, with a multiple headers. The &lt;code&gt;Year&lt;/code&gt; spans multiple columns, which is then broken down by candidate. Also note that some years have two candidates, while other years have three or more.&lt;/p&gt;
&lt;p&gt;The data shown in the screenshot are shown by percentages of the vote. If we scroll across to column &lt;strong&gt;HG&lt;/strong&gt;, the votes are reported again in raw numbers.&lt;/p&gt;
&lt;p&gt;Our goal is to read the data into the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;year,state,votes,candidate,party,short_state
2016,Alabama,729547,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,AL
2016,Alaska,116454,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,AK
2016,Arizona,1161167,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,AZ
2016,Arkansas,380494,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,AR
2016,California,8753788,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,CA
2016,Colorado,1338870,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,CO
2016,Connecticut,897572,&amp;quot;Clinton, Hillary&amp;quot;,Democratic,CT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this post we will walk through the main steps, but a repository including the full code for processing this data set is available &lt;a href="https://github.com/kiwidamien/presidential_election_data"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Dealing with a MultiIndex&lt;/h2&gt;
&lt;p&gt;Let's start with a simplified excel spreadsheet with the following format:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;Year&lt;/th&gt;
  &lt;th colspan=3 style="text-align:center"&gt;2012&lt;/th&gt;
  &lt;th colspan=3 style="text-align:center"&gt;2008&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;State&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;Total&lt;/td&gt;
  &lt;td&gt;Obama, Barak -  Democratic&lt;/td&gt;
  &lt;td&gt;Romney, Mitt - Republican &lt;/td&gt;
  &lt;td&gt;Total&lt;/td&gt;
  &lt;td&gt;Obama, Barak -  Democratic&lt;/td&gt;
  &lt;td&gt;McCain, John - Republican &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;Alabama&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;2074338&lt;/td&gt;
  &lt;td&gt;795696&lt;/td&gt;
  &lt;td&gt;1255925&lt;/td&gt;
  &lt;td&gt;2099819&lt;/td&gt;
  &lt;td&gt;813479&lt;/td&gt;
  &lt;td&gt;1266546&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;Alaska&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;300495&lt;/td&gt;
  &lt;td&gt;122640&lt;/td&gt;
  &lt;td&gt;164676&lt;/td&gt;
  &lt;td&gt;326197&lt;/td&gt;
  &lt;td&gt;123594&lt;/td&gt;
  &lt;td&gt;193841&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Note that the sum of the "major" candidates don't sum to the totals. Presumably there are some write-ins that are not counted.&lt;/p&gt;
&lt;p&gt;We have also skipped the percentages that occurred at the beginning of the real spreadsheet. Our goal here is to be able to unpack the multiindex.&lt;/p&gt;
&lt;p&gt;Let's start by reading in the dataset. We don't try and name the headers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our dataframe now looks like&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;2012&lt;/th&gt;
&lt;th&gt;NaN&lt;/th&gt;
&lt;th&gt;NaN&lt;/th&gt;
&lt;th&gt;2008&lt;/th&gt;
&lt;th&gt;NaN&lt;/th&gt;
&lt;th&gt;NaN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;State&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Obama, Barak -  Democratic&lt;/td&gt;
&lt;td&gt;Romney, Mitt - Republican&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Obama, Barack - Democratic&lt;/td&gt;
&lt;td&gt;McCain, John - Republican&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alabama&lt;/td&gt;
&lt;td&gt;2074338&lt;/td&gt;
&lt;td&gt;795696&lt;/td&gt;
&lt;td&gt;1255925&lt;/td&gt;
&lt;td&gt;2099819&lt;/td&gt;
&lt;td&gt;813479&lt;/td&gt;
&lt;td&gt;1266546&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alaska&lt;/td&gt;
&lt;td&gt;300495&lt;/td&gt;
&lt;td&gt;122640&lt;/td&gt;
&lt;td&gt;164676&lt;/td&gt;
&lt;td&gt;326197&lt;/td&gt;
&lt;td&gt;123594&lt;/td&gt;
&lt;td&gt;193841&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The merged cells have been split, and the year only appears in the first one. The other cells have been replaced by NaNs.&lt;/p&gt;
&lt;p&gt;Now let's make a MultiIndex using the first two rows (year and candidate). Let's start by replacing the NAs using &lt;code&gt;ffill&lt;/code&gt; (foward fill). This moves the last non-null value "forward" over null values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;multi_index_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ffill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that when we only kept the first couple of columsn, and dropped the first row. Now &lt;code&gt;multi_index_values&lt;/code&gt; is&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2012&lt;/th&gt;
&lt;th&gt;2012&lt;/th&gt;
&lt;th&gt;2012&lt;/th&gt;
&lt;th&gt;2008&lt;/th&gt;
&lt;th&gt;2008&lt;/th&gt;
&lt;th&gt;2008&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Obama, Barak -  Democratic&lt;/td&gt;
&lt;td&gt;Romney, Mitt - Republican&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Obama, Barack - Democratic&lt;/td&gt;
&lt;td&gt;McCain, John - Republican&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let's make a multi-index, and make a dataframe out of it. Recall the first two rows included the headers, so we are copying the index from row 2 down. We are making the state (i.e. column 0) the row index.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;multi_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultiIndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_arrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multi_index_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CANDIDATES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;multi_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;multi_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now our dataframe in pandas is almost in the same layout as the original worksheet.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;Year&lt;/th&gt;
  &lt;th colspan=3 style="text-align:center"&gt;2012&lt;/th&gt;
  &lt;th colspan=3 style="text-align:center"&gt;2008&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;CANDIDATES&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;Total&lt;/td&gt;
  &lt;td&gt;Obama, Barak -  Democratic&lt;/td&gt;
  &lt;td&gt;Romney, Mitt - Republican &lt;/td&gt;
  &lt;td&gt;Total&lt;/td&gt;
  &lt;td&gt;Obama, Barak -  Democratic&lt;/td&gt;
  &lt;td&gt;McCain, John - Republican &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;Alabama&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;2074338&lt;/td&gt;
  &lt;td&gt;795696&lt;/td&gt;
  &lt;td&gt;1255925&lt;/td&gt;
  &lt;td&gt;2099819&lt;/td&gt;
  &lt;td&gt;813479&lt;/td&gt;
  &lt;td&gt;1266546&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;b&gt;Alaska&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;300495&lt;/td&gt;
  &lt;td&gt;122640&lt;/td&gt;
  &lt;td&gt;164676&lt;/td&gt;
  &lt;td&gt;326197&lt;/td&gt;
  &lt;td&gt;123594&lt;/td&gt;
  &lt;td&gt;193841&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;Unstacking&lt;/h2&gt;
&lt;p&gt;We have the problem that our columns are actually names of variables. At the top level of the column index, we have the years. At the lower level, we have the candidates. We can undo this with the &lt;code&gt;unstack&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;unstacked_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multi_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;unstacked_df&lt;/code&gt; has the form&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2012  Obama, Barack - Democratic  Alabama     795696
                                  Alaska     122640
      Romney, Mitt - Republican   Alabama    1255925
                                  Alaska     164676
2008  Obama, Barack - Democratic  Alabama    813479
                                  Alaska     123594
      McCain, John - Republican   Alabama    1266546
                                  Alaska     193841
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling &lt;code&gt;unstacked_df.reset_index()&lt;/code&gt; fills out the columns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;year      CANDIDATES               level_2      0
2012  Obama, Barack - Democratic   Alabama   795696
2012  Obama, Barack - Democratic   Alaska    122640
2012  Romney, Mitt - Republican    Alabama  1255925
2012  Romney, Mitt - Republican    Alaska    164676
2008  Obama, Barack - Democratic   Alabama   813479
2008  Obama, Barack - Democratic   Alaska    123594
2008  McCain, John - Republican    Alabama  1266546
2008  McCain, John - Republican    Alaska    193841
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can separate the candidate and party information with the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;unstacked_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;candidate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unstacked_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CANDIDATES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;unstacked_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;party&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unstacked_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CANDIDATES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;unstacked_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CANDIDATES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The final product&lt;/h2&gt;
&lt;p&gt;Once we have this, a rename on the columns &lt;code&gt;level_2&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; give us&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   year  state      votes    candidate      party
0  2012  Alabama   795696  Obama, Barack  Democratic
1  2012   Alaska   122640  Obama, Barack  Democratic
2  2012  Alabama  1255925   Romney, Mitt  Republican
3  2012   Alaska   164676   Romney, Mitt  Republican
4  2008  Alabama   813479  Obama, Barack  Democratic
5  2008   Alaska   123594  Obama, Barack  Democratic
6  2008  Alabama  1266546   McCain, John  Republican
7  2008   Alaska   193841   McCain, John  Republican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simplified process. We didn't show the join to create the "short state code", or show how to skip the columns in the spreadsheet that contain the percentages.  A complete description of the process can be found in &lt;a href="https://github.com/kiwidamien/presidential_election_data"&gt;this github repo&lt;/a&gt;. If you are just interested in the results, you can find them in &lt;a href="https://gist.github.com/kiwidamien/6b069a63fa204cd7d2b893510e2efe7c"&gt;this gist&lt;/a&gt; instead.&lt;/p&gt;</content><category term="Data munging"></category><category term="Pandas"></category></entry><entry><title>Using Folium: What is the furthest you can get from Starbucks in Seattle?</title><link href="https://kiwidamien.github.io/using-folium-what-is-the-furthest-you-can-get-from-starbucks-in-seattle.html" rel="alternate"></link><published>2017-04-08T20:30:00-07:00</published><updated>2017-04-08T20:30:00-07:00</updated><author><name>Damien Martin</name></author><id>tag:kiwidamien.github.io,2017-04-08:/using-folium-what-is-the-furthest-you-can-get-from-starbucks-in-seattle.html</id><summary type="html">&lt;p&gt;It seems that Starbucks is ubiquitous in Seattle. Where in Seattle is furthest from a Starbucks store?&lt;/p&gt;
&lt;p&gt;In order to work this out, we need a list of all the stores in Seattle. The open data project &lt;a href="https://opendata.socrata.com/"&gt;Socrata&lt;/a&gt; makes it easy to find out - you can pull the address, as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It seems that Starbucks is ubiquitous in Seattle. Where in Seattle is furthest from a Starbucks store?&lt;/p&gt;
&lt;p&gt;In order to work this out, we need a list of all the stores in Seattle. The open data project &lt;a href="https://opendata.socrata.com/"&gt;Socrata&lt;/a&gt; makes it easy to find out - you can pull the address, as well as longitude and latitude  all the Starbucks locations in the any given city.&lt;/p&gt;
&lt;p&gt;This question was also a fun way for me to experiment with methods for presenting data and calculations on maps. My ultimate goal was to have something people could interact with on this blog, without having to install extra plugins.&lt;/p&gt;
&lt;h2&gt;Methodolgy&lt;/h2&gt;
&lt;p&gt;First we had to decide what counted as "Seattle" for the purposes of this calculation. To make it easy to reproduce similar calculations for other cities, I decided that I would choose the bounding longitudes as the lower quartile and upper quartiles of longitudes for stores retrieved by Socrata. The same cut was made for the latitudes. This restriction hopefully makes an interesting answer, rather than telling us the middle of a residential district like &lt;em&gt;Magnolia&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I broke Seattle into regions, called &lt;a href="https://en.wikipedia.org/wiki/Voronoi_diagram"&gt;Voronoi Cells&lt;/a&gt;. The idea is that each region has single Starbucks store in it, and is defined as the collection of points that are closest to that Starbucks. For example, taking a square city with two stores, the line halfway between the stores divides the city in two: on one side you are closer to store #1, on the other you are closer to store #2.&lt;/p&gt;
&lt;div class="veronoi" style="width:20%;margin-left:auto;margin-right:auto"&gt;
&lt;svg&gt;
&lt;rect x ="0" y="0" width="125" height="200"
      style="fill:yellow;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
&lt;rect x ="125" y="0" width="125" height="200"
      style="fill:blue;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
&lt;circle cx="50" cy="40" r="15" stroke="yellow" stroke-width="2"
        fill="yellow" /&gt;
&lt;circle cx = "200" cy = "40" r="15"
        stroke="green" stroke-width ="2" fill="cyan" /&gt;
&lt;line x1="125" y1="0" x2="125" y2="200"
      style="stroke:rgb(0,0,0);stroke-width:2" /&gt;
&lt;text x="46" y="45"&gt;1&lt;/text&gt;
&lt;text x="195" y="45"&gt;2&lt;/text&gt;
&lt;text x="10" y="140"&gt;Region closer to 1&lt;/text&gt;
&lt;text x="130" y="140"&gt;Region closer to 2&lt;/text&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;Adding a third store changes the picture. Placing it toward the bottom of the city, but centered horizontally gives the following cells:&lt;/p&gt;
&lt;div class="veronoi" style="width:20%;margin-left:auto;margin-right:auto"&gt;
  &lt;svg width="250" height="200"&gt;
  &lt;rect x ="0" y="0" width="125" height="80" style="fill:yellow;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
  &lt;rect x ="125" y="0" width="125" height="80" style="fill:blue;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
  &lt;rect x="0" y="80" width="250" height ="120" style="fill:green;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
  &lt;circle cx="50" cy="40" r="15" stroke="yellow" stroke-width="2" fill="yellow" /&gt;
  &lt;circle cx = "200" cy = "40" r="15" stroke="green" stroke-width ="2" fill="cyan"&gt;&lt;/circle&gt;
  &lt;circle cx = "125" cy = "120" r="15" stroke="green" stroke-width ="2" fill="green" /&gt;
   &lt;line x1="125" y1="0" x2="125" y2="80" style="stroke:rgb(0,0,0);stroke-width:2" /&gt;
   &lt;line x1="0" y1="80" x2="250" y2="80" style="stroke:rgb(0,0,0);stroke-width:2" /&gt;
   &lt;text x="46" y="45"&gt;1&lt;/text&gt;
   &lt;text x="195" y="45"&gt;2&lt;/text&gt;
   &lt;text x="121" y="125"&gt;3&lt;/text&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;If the third store is directly below store 1, we get&lt;/p&gt;
&lt;div class="veronoi" style="width:20%;margin-left:auto;margin-right:auto"&gt;
  &lt;svg width="250" height="200"&gt;
  &lt;rect x ="0" y="0" width="125" height="80" style="fill:yellow;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
   &lt;polygon points="250,0 125,0 125,80 189,200 250,200" style="fill:blue;fill-opacity:0.1;" /&gt;
   &lt;polygon points="0,80 125,80 189,200 0,200"
   style="fill:green;fill-opacity:0.1;stroke-opacity:0.9"/&gt;
  &lt;circle cx="50" cy="40" r="15" stroke="yellow" stroke-width="2" fill="yellow" /&gt;
  &lt;circle cx = "200" cy = "40" r="15" stroke="green" stroke-width ="2" fill="cyan" /&gt;
  &lt;circle cx = "50" cy = "120" r="15" stroke="green" stroke-width ="2" fill="green" /&gt;
   &lt;line x1="125" y1="0" x2="125" y2="80" style="stroke:rgb(0,0,0);stroke-width:2" /&gt;
   &lt;line x1="0" y1="80" x2="125" y2="80" style="stroke:rgb(0,0,0);stroke-width:2" /&gt;
   &lt;!--
   midpoint between 1 and 2:
   [ (200,40) + (50,120)]/2 = (125,80)
   Gradient of line joining them:
   Dy/Dx = (120-40)/(50-200) = -80/150
   Gradient of normal
   150/80 = 15/8 = 1.875

   Eqn of line:
   y - 80 = (150/80)(x - 125)
   --&gt;
   &lt;line x1="125" y1="80" x2="189" y2="200" style="stroke:rgb(0,0,0);stroke-width:2" /&gt;
   &lt;text x="46" y="45"&gt;1&lt;/text&gt;
   &lt;text x="195" y="45"&gt;2&lt;/text&gt;
   &lt;text x="45" y="125"&gt;3&lt;/text&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt;The location furthest from a Starbucks has to either by an intersection point between the regions (the examples with three stores have one intersection point, the example with two stores has none), or a point on the boundary of the city. I was able to use &lt;code&gt;scipy.spatial.Voronoi&lt;/code&gt; to calculate the Voronoi cells and get a list of intersection points, rather than trying to do it by hand. It was useful practice to annotate the maps with the cells as well.&lt;/p&gt;
&lt;h2&gt;The map&lt;/h2&gt;
&lt;p&gt;Here is the final map produced. You can highlight the Voronoi cells by mousing over them to get an idea of how large an area each store "controls". You can also bring up information about the stores by clicking on them.&lt;/p&gt;
&lt;div style="width:10%;float:left;"&gt;&lt;/div&gt;

&lt;div style="width:80%;margin-left: auto; margin-right:auto;"&gt;
&lt;iframe width="100%" height="600" src="furthest_starbucks.html" frameborder="0" align="center" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;We find that the furthest we can get from Starbucks in Seattle is the corner of Meridian Avenue North with North 36th street (a few streets north of Gas Works Park), shown as an orange dot. The bounding box is also shown in orange.&lt;/p&gt;
&lt;h2&gt;Folium compared to other packages&lt;/h2&gt;
&lt;p&gt;There are many ways to plot data on top of maps with Python. Here are a few I considered before using folium:&lt;/p&gt;
&lt;h4&gt;Basemap (part of matplotlib)&lt;/h4&gt;
&lt;p&gt;This is a great way to create attractive graphs in Python. There are lots of tutorials, and the package is well documented. The disadvantages are that basemap expects you to obtain and manage shapefiles, and the output are static images (like the plots in matplotlib). This is easy to work with in an interactive environment, but makes it difficult to just the results of your work to someone else.&lt;/p&gt;
&lt;p&gt;Tutorials for basemap:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.datadependence.com/2016/06/creating-map-visualisations-in-python/"&gt;Creating attractive informative maps visualizations in Python with Basemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sensitivecities.com/so-youd-like-to-make-a-map-using-python-EN.html#.WOncl1KZOgQ"&gt;So you'd like to make a map using (basemap) python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Plot.ly&lt;/h4&gt;
&lt;p&gt;This was one of the slickest options I considered. To use it, you need to create an account (free trials are offered), and it seemed difficult to embed directly on a static site. These considerations led me to dismiss &lt;code&gt;Plot.ly&lt;/code&gt; fairly early, although it looks like a good option if you don't mind paying for an account.&lt;/p&gt;
&lt;h4&gt;Bokeh&lt;/h4&gt;
&lt;p&gt;Bokeh is a collection of plots that uses the &lt;strong&gt;grammar of graphics&lt;/strong&gt; to build up plots. The plots are interactive on the development machine, and you can setup your server to run Bokeh plots to allow other people to interact with your plots online. When working with static pages on a server designed to serve static pages, I would have to either embed or link to an external Bokeh plot. If I was running this off my own server, using Bokeh would certainly be viable.&lt;/p&gt;
&lt;h4&gt;Folium&lt;/h4&gt;
&lt;p&gt;Folium seems to be the extension of the now defunct &lt;strong&gt;Vincent&lt;/strong&gt; package for python. Folium makes maps that use &lt;strong&gt;Leaflet.js&lt;/strong&gt; to remain interactive, so you can save the output to HTML. Anyone with a browser can open the HTML (or visit it on your blog) and still pan, zoom, and have the interactive mouse-overs and tool tips still function.&lt;/p&gt;
&lt;p&gt;The downside to folium is that there are a &lt;a href="http://www.digital-geography.com/python-and-webmaps-folium/#.WOnulFKZOgT"&gt;lot&lt;/a&gt; &lt;a href="https://greek0.net/blog/2016/01/27/plotting_maps_with_folium/"&gt;of&lt;/a&gt; &lt;a href="https://blog.dominodatalab.com/creating-interactive-crime-maps-with-folium/"&gt;great&lt;/a&gt; &lt;a href="https://ocefpaf.github.io/python4oceanographers/blog/2015/12/14/geopandas_folium/"&gt;tutorials&lt;/a&gt; ..... for version 0.2.0. The current version, 0.3.0, introduced a lot of reorganization and the documentation is lagging. All of the tutorials have commands that break in version 0.3.0. For example, in 0.2.0 the command to create a dot on the map was &lt;code&gt;folium.Map.circle_marker&lt;/code&gt;, while in 0.3.0 it is &lt;code&gt;folium.CircleMarker&lt;/code&gt;. The documentation is improving, and GitHub has a collection of 0.3.0 &lt;a href="https://github.com/python-visualization/folium/tree/master/examples"&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once written, the code is very readable, and there is great integration with Open Street Maps, so you don't have to keep your own shape files on hand. One of the goals of this project was to be able to refer back to it as an example of how to use folium 0.3.0!&lt;/p&gt;
&lt;h4&gt;Geoplotlib and Kartograph.py&lt;/h4&gt;
&lt;p&gt;I only found out about these package once I had completed the project.&lt;/p&gt;
&lt;p&gt;It looks like geoplotlib only produces static maps, similar to Basemap, but seems like it is very expressive and able to do a lot without much code. It is also integrated with GeoPandas.&lt;/p&gt;
&lt;p&gt;Kartograph is designed to produce maps in python that are then coverted into SVG elements with embedded javascript, to enable the maps to be shared with anyone with a browser.&lt;/p&gt;
&lt;p&gt;I will experiment with both of these in a future blog post.&lt;/p&gt;
&lt;h3&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/kiwidamien/StarbucksVeronoi"&gt;The github page&lt;/a&gt; for this project, or use a direct link to the &lt;a href="https://github.com/kiwidamien/StarbucksVeronoi/blob/master/TidyStarbuckSeattle.ipynb"&gt;Python notebook&lt;/a&gt;. You can experiment with your own choice of city.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://opendata.socrata.com/Business/All-Starbucks-Locations-in-the-World/xy4y-c4mk"&gt;Socrata list of Starbucks Stores&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/python-visualization/folium/tree/master/examples"&gt;Folium 0.3.0 example repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/andrea-cuttone/geoplotlib"&gt;Geoplotlib&lt;/a&gt; and &lt;a href="http://kartograph.org"&gt;Kartograph&lt;/a&gt; projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="geocoding"></category><category term="visualization"></category><category term="folium"></category></entry><entry><title>A/B Test simulator</title><link href="https://kiwidamien.github.io/ab_calc/" rel="alternate"></link><published>2017-03-10T11:00:00-08:00</published><updated>2017-03-10T11:00:00-08:00</updated><author><name>Damien Martin</name></author><id>tag:kiwidamien.github.io,2017-03-10:/ab_calc/</id><summary type="html">&lt;p&gt;Determine the sample size needed to discover differences between two treatments, given your tolerance for false acceptances of inferior treatments, and false rejection of good treatments. Also includes a simulation of a trial, so that you can see an example of what the experimental results could look like with the given sample size.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;An A/B sample size calculator and simulator&lt;/h1&gt;
&lt;p&gt;This post leads to (yet another) online calculator for determining the sample size needed to reliably find an effect when testing two different "treatments". These treatments could be different layouts on a website, different drugs in a trial, different teaching methodologies.&lt;/p&gt;
&lt;p&gt;Unlike many other calculators, this one will run a simulation and ask you to decide on a course of action &amp;mdash; accept or reject the alternative treatment &amp;mdash; as well as offering you feedback on the decision that you made. This approach of using simulated data gives a better understanding of Type I and Type II errors, without ruining the data from expensive experiments.&lt;/p&gt;
&lt;script&gt;
&lt;!--
            function Redirect() {
               window.location="https://kiwidamien.github.io/ab_calc/" ;
            }
         //--&gt;
&lt;/script&gt;

&lt;p&gt;If you are not redirected automatically, please visit &lt;a href="https://kiwidamien.github.io/ab_calc"&gt;https://kiwidamien.github.io/ab_calc/&lt;/a&gt;&lt;/p&gt;</content><category term="A/B test"></category><category term="test"></category><category term="data"></category><category term="simulation"></category></entry><entry><title>Snake on a cube with ReactJS</title><link href="https://kiwidamien.github.io/reactJS-and-cubenet.html" rel="alternate"></link><published>2017-02-17T00:00:00-08:00</published><updated>2017-02-17T00:00:00-08:00</updated><author><name>Damien Martin</name></author><id>tag:kiwidamien.github.io,2017-02-17:/reactJS-and-cubenet.html</id><summary type="html"></summary><content type="html"></content><category term="ReactJS"></category><category term="visualization"></category><category term="Javascript"></category></entry><entry><title>My super title</title><link href="https://kiwidamien.github.io/my-super-post.html" rel="alternate"></link><published>2010-12-03T10:20:00-08:00</published><updated>2010-12-05T19:30:00-08:00</updated><author><name>Alexis Metaireau</name></author><id>tag:kiwidamien.github.io,2010-12-03:/my-super-post.html</id><summary type="html">&lt;p&gt;Short version for index and feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the content of my super blog post.&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry></feed>